https://medium.com/@akhileshanand/spring-boot-api-security-with-jwt-and-role-based-authorization-fea1fd7c9e32
https://www.techgeeknext.com/spring/spring-boot-security-token-authentication-jwt-mysql
https://www.javainuse.com/spring/boot-jwt-mysql
https://www.xoriant.com/blog/product-engineering/microservices-security-using-jwt-authentication-gateway.html
https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2

good example- https://medium.com/javarevisited/springboot-security-with-jwt-fca1446790ba
https://www.xoriant.com/blog/microservices-security-using-jwt-authentication-gateway

spring security basics- https://spring.io/guides/topicals/spring-security-architecture

JWT stands for JSON Web Token. JSON Web Token (JWT) is an open standard (RFC 7519) that defines 
a compact and self-contained way for securely transmitting information between parties as a JSON object. 
This information can be verified and trusted because it is digitally signed. 
The client will need to authenticate with the server using the credentials only once. 
During this time the server validates the credentials and returns the client a JSON Web Token(JWT). 
For all future requests the client can authenticate itself to the server using this JSON Web Token(JWT) 
and so does not need to send the credentials like username and password.