this is a seperate resource server which authenticates JWT using public key

 try these example- 
 https://github.com/dzinot/spring-boot-2-oauth2-resource-jwt
 https://www.baeldung.com/spring-security-oauth-jwt
 https://github.com/Baeldung/spring-security-oauth/tree/master/oauth-jwt/jwt-auth-server/src/main/resources
 
 a few more examples-
 https://auth0.com/docs/quickstart/backend/java-spring-security5/01-authorization
 https://www.initgrep.com/posts/java/spring/spring-security-oauth2-jwt-authentication-resource-server
 https://auth0.com/blog/spring-boot-authorization-tutorial-secure-an-api-java/
 
 spring docs-
 https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html#oauth2resourceserver-jwt-decoder-public-key
 
 Generate JKS Java KeyStore File
Let’s first generate the keys – and more specifically a .jks file – using the command line tool keytool:

keytool -genkeypair -alias mytest -keyalg RSA -keypass mypass -keystore mytest.jks -storepass mypass

Export your public key
keytool -list -rfc --keystore mytest.jks | openssl x509 -inform pem -pubkey

OpenSSL can be found here to execute above command-
C:\Program Files\Git\usr\bin\openssl.exe